{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NeoForge 1.21.1 Modding Course","text":"<p>Welcome! This site hosts the syllabus, schedule, lessons, and assignments for the course.</p>"},{"location":"#start-here","title":"Start Here","text":"<ul> <li>Set up your environment: Setup</li> <li>Read the course overview: Syllabus</li> <li>Follow along each week: Schedule</li> </ul> <p>Editing this site</p> <p>All content lives in the <code>docs/</code> folder as Markdown. Use <code>mkdocs serve</code> to preview changes locally.</p>"},{"location":"#what-youll-learn","title":"What you\u2019ll learn","text":"<ul> <li>Configure a NeoForge modding workspace</li> <li>Create items, blocks, and simple gameplay logic</li> <li>Build, test, and package mods</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<p>Use the sidebar to jump to Lessons, Assignments, or Resources any time.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-do-i-run-the-site-locally","title":"How do I run the site locally?","text":"<p>Install requirements and run <code>mkdocs serve</code>.</p>"},{"location":"faq/#where-do-i-find-assignments","title":"Where do I find assignments?","text":"<p>Use the Assignments section in the sidebar.</p>"},{"location":"grading/","title":"Grading","text":"<p>Placeholder for grading breakdown and rubric extracted from the syllabus.</p>"},{"location":"policies/","title":"Policies","text":"<p>Placeholder for attendance, collaboration, late work, and conduct policies extracted from the syllabus.</p>"},{"location":"resources/","title":"Resources","text":"<ul> <li>NeoForge documentation \u2014 TBD</li> <li>Official Minecraft documentation \u2014 TBD</li> <li>Java and Gradle references \u2014 TBD</li> </ul> <p>Populate with stable links as the course solidifies.</p>"},{"location":"schedule/","title":"Schedule","text":"Week Topic Lesson Assignment 1 Getting Started Lesson 1 A1 2 Blocks and Items Lesson 2 \u2014 <p>Add rows as the course is finalized.</p>"},{"location":"setup/","title":"Setup","text":"<p>Follow these steps to prepare your machine for the course.</p>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git (latest)</li> <li>Java Development Kit (JDK) \u2014 version to be confirmed for this course</li> <li>A modern IDE (IntelliJ IDEA Community or VS Code)</li> </ul> <p>Java version</p> <p>We will confirm the exact Java target for NeoForge in this course. Keep this placeholder until finalized.</p>"},{"location":"setup/#install-steps","title":"Install steps","text":"<ol> <li>Install Git from git-scm.com and ensure <code>git --version</code> works.</li> <li>Install the JDK and ensure <code>java -version</code> and <code>javac -version</code> work.</li> <li>Install your IDE and Gradle support plugin if needed.</li> </ol>"},{"location":"setup/#project-scaffold","title":"Project scaffold","text":"<p>We\u2019ll provide a starter mod repository and Gradle build once lessons begin.</p>"},{"location":"syllabus/","title":"Syllabus","text":"<p>Minecraft NeoForge 1.21.1 Modding Mastery College\u2011Style Course Syllabus &amp; Detailed Outline</p> <p>Prepared for: Self\u2011Paced / Udemy or Self\u2011Hosted Delivery</p> <p>Version: 1.0 (October 30, 2025)</p>"},{"location":"syllabus/#course-overview","title":"Course Overview","text":"<p>This course transforms a beginner modder with professional software experience into a full NeoForge mod developer. It follows a scaffolded, college\u2011style structure in four semesters: Foundations, Interactivity &amp; Systems, World &amp; Entities, and Professional Development. Each module introduces core concepts, then immediately applies them through labs and a cumulative project. By the end, learners publish a polished mod with GUIs, networking, entities, world generation, datapacks/configs, testing, and CI/CD.</p>"},{"location":"syllabus/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li> <p>Set up and maintain a robust NeoForge 1.21.1 development environment.</p> </li> <li> <p>Design and register content: items, blocks, recipes, loot tables, tags, models, and blockstates.</p> </li> <li> <p>Implement stateful logic with Block Entities, Menus/Screens (GUIs), inventories, NBT persistence, and renderers.</p> </li> <li> <p>Use events, ticking, and custom recipe systems to implement gameplay mechanics.</p> </li> <li> <p>Build networking layers (packets) for client\u2194server sync and user interactions.</p> </li> <li> <p>Integrate fluids, energy/capabilities, and datapack\u2011driven balancing with reload listeners.</p> </li> <li> <p>Author worldgen features (ores, trees, structures, biomes) and custom entities with AI and attributes.</p> </li> <li> <p>Create villager professions/trades and add immersive audio, particles, and custom models.</p> </li> <li> <p>Ensure compatibility (tags, JEI), performance, multiplayer correctness, and automated tests.</p> </li> <li> <p>Package, license, and publish a production\u2011quality mod with CI/CD and documentation.</p> </li> </ul>"},{"location":"syllabus/#target-audience-prerequisites","title":"Target Audience &amp; Prerequisites","text":"<ul> <li> <p>Audience: Developers new to Minecraft modding (comfortable with Java/Gradle, OOP, and Git).</p> </li> <li> <p>Prereqs: Java 17/21 fluency, IntelliJ basics, Git/GitHub, command line familiarity.</p> </li> </ul>"},{"location":"syllabus/#required-software-resources","title":"Required Software &amp; Resources","text":"<ul> <li> <p>JDK 21 (or compatible with NeoForge toolchain).</p> </li> <li> <p>IntelliJ IDEA Community or Ultimate.</p> </li> <li> <p>Gradle wrapper (from MDK).</p> </li> <li> <p>NeoForge MDK for Minecraft 1.21.1.</p> </li> <li> <p>Git &amp; GitHub account for version control and CI/CD.</p> </li> <li> <p>Optional: Image editor for textures (Aseprite/GIMP), sound editor (Audacity).</p> </li> </ul>"},{"location":"syllabus/#delivery-assessment-model","title":"Delivery &amp; Assessment Model","text":"<ul> <li> <p>Delivery: Video lectures + written labs + reference code.</p> </li> <li> <p>Assessments: Lesson quizzes (formative), module labs (summative), semester capstones (major grade).</p> </li> <li> <p>Cumulative Capstone: Publish a complete mod on Modrinth/CurseForge with README, license, and CI build.</p> </li> </ul>"},{"location":"syllabus/#grading-breakdown-suggested-for-academic-settings","title":"Grading Breakdown (suggested for academic settings)","text":"<ul> <li> <p>Quizzes (per lesson): 10%</p> </li> <li> <p>Labs (end of each module): 35%</p> </li> <li> <p>Semester Capstone Projects (x4): 40% (10% each)</p> </li> <li> <p>Final Publication &amp; Presentation: 15%</p> </li> </ul>"},{"location":"syllabus/#academic-integrity-collaboration-policy","title":"Academic Integrity &amp; Collaboration Policy","text":"<ul> <li> <p>Code sharing allowed for labs with attribution; copying without understanding is discouraged.</p> </li> <li> <p>Capstone project must be primarily the student\u2019s work; external libraries and APIs allowed with credit.</p> </li> <li> <p>Follow licensing rules for assets and third\u2011party code.</p> </li> </ul>"},{"location":"syllabus/#foursemester-structure-recommended-pacing","title":"Four\u2011Semester Structure (Recommended Pacing)","text":"<p>Each semester groups thematically related modules. Self\u2011paced learners can compress or expand schedules.</p>"},{"location":"syllabus/#semester-1-foundations-of-modding-beginner-intermediate","title":"SEMESTER 1 \u2014 Foundations of Modding (Beginner \u2192 Intermediate)","text":""},{"location":"syllabus/#module-1-environment-setup","title":"Module 1 \u2014 Environment &amp; Setup","text":"<p>Lessons:</p> <ol> <li> <p>Intro to NeoForge &amp; project anatomy (MDK, @Mod, event buses).</p> </li> <li> <p>Install JDK/Gradle/IntelliJ; clone MDK and runClient/runServer/runData.</p> </li> <li> <p>Mappings (official/Parchment) and build.gradle essentials.</p> </li> <li> <p>Logging, configuration separation, and jar packaging.</p> </li> <li> <p>Source control: repo layout, .gitignore, commits, branching.</p> </li> </ol> <p>Lab / Project:</p> <p>Create \u2018Hello NeoForge\u2019 mod that logs on startup and exports a signed JAR.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Run a clean dev environment reliably.</p> </li> <li> <p>Understand lifecycle entry points and run configs.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#module-2-core-content-items-blocks","title":"Module 2 \u2014 Core Content: Items &amp; Blocks","text":"<p>Lessons:</p> <ol> <li> <p>Deferred registers: Items, Blocks, RegistryObject lifecycle.</p> </li> <li> <p>Assets: models, blockstates, lang files; resource folder structure.</p> </li> <li> <p>Recipes &amp; loot tables; shaped/unshaped, smelting, smithing.</p> </li> <li> <p>Datagen basics: generate models, blockstates, loot, recipes.</p> </li> <li> <p>Tags &amp; creative tabs; vanilla derivatives (stairs, slabs, fences).</p> </li> </ol> <p>Lab / Project:</p> <p>Ore Expansion Pack: custom ore \u2192 ingot pipeline with tags, recipes, and datagen.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Create content fully via registries + JSON/datagen.</p> </li> <li> <p>Organize assets for maintainability.</p> </li> </ul> <p>Estimated Duration: 6\u20138 hours</p>"},{"location":"syllabus/#module-3-tools-armor-materials","title":"Module 3 \u2014 Tools, Armor &amp; Materials","text":"<p>Lessons:</p> <ol> <li> <p>Tool tiers &amp; custom behavior; hammer/paxel patterns.</p> </li> <li> <p>Armor materials, trims, effects on hit and full\u2011set bonuses.</p> </li> <li> <p>Horse armor and item properties/durability overrides.</p> </li> </ol> <p>Lab / Project:</p> <p>Forged Tools set with full armor, special hit effects, and trims.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Author tools/armor with tuned stats and effects.</p> </li> <li> <p>Leverage item properties for behavior.</p> </li> </ul> <p>Estimated Duration: 5\u20137 hours</p>"},{"location":"syllabus/#module-4-items-with-behavior","title":"Module 4 \u2014 Items With Behavior","text":"<p>Lessons:</p> <ol> <li> <p>Food &amp; status effects; contextual tooltips.</p> </li> <li> <p>Custom fuel &amp; burn times; intro to components/properties.</p> </li> <li> <p>Event primer: subscribing safely; client vs server considerations.</p> </li> </ol> <p>Lab / Project:</p> <p>Mystic Produce: edible items with randomized buffs and rich tooltips.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Wire items into effects and events cleanly.</p> </li> <li> <p>Write safe, side\u2011aware handlers.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#module-5-reading-the-codebase","title":"Module 5 \u2014 Reading the Codebase","text":"<p>Lessons:</p> <ol> <li> <p>Navigating vanilla source; common classes &amp; patterns.</p> </li> <li> <p>Reverse\u2011engineering a furnace: inventory, smelting, fuel logic.</p> </li> <li> <p>Survey of open\u2011source mods and best practices.</p> </li> </ol> <p>Lab / Project:</p> <p>Create a reference doc mapping common tasks \u2192 vanilla classes/methods.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Find exemplars quickly in vanilla and community code.</p> </li> <li> <p>Adopt patterns that age well across versions.</p> </li> </ul> <p>Estimated Duration: 3\u20134 hours</p>"},{"location":"syllabus/#semester-2-interactivity-systems-intermediate","title":"SEMESTER 2 \u2014 Interactivity &amp; Systems (Intermediate)","text":""},{"location":"syllabus/#module-6-block-entities-guis","title":"Module 6 \u2014 Block Entities &amp; GUIs","text":"<p>Lessons:</p> <ol> <li> <p>BlockEntity lifecycle: NBT save/load, server tickers.</p> </li> <li> <p>Menus (containers) and Screens: inventory wiring and rendering.</p> </li> <li> <p>ItemStackHandler and slot rules; syncing with DataSlots/packets.</p> </li> <li> <p>Renderer basics (block entity renderer).</p> </li> </ol> <p>Lab / Project:</p> <p>Infuser v1: ticking BE with input/output inventory and a basic GUI.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Combine server BE logic with client GUIs.</p> </li> <li> <p>Persist and sync state correctly.</p> </li> </ul> <p>Estimated Duration: 6\u20138 hours</p>"},{"location":"syllabus/#module-7-networking-sync","title":"Module 7 \u2014 Networking &amp; Sync","text":"<p>Lessons:</p> <ol> <li> <p>SimpleChannel setup; protocol versioning.</p> </li> <li> <p>Client\u2192Server actions (buttons/keybinds) and server validation.</p> </li> <li> <p>Syncing custom fields and partial updates; thread enqueuing.</p> </li> </ol> <p>Lab / Project:</p> <p>Infuser v2: GUI button triggers server craft; state updates flow back.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Design safe, minimal packet flows.</p> </li> <li> <p>Avoid side\u2011leaks and race conditions.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#module-8-events-recipes-effects","title":"Module 8 \u2014 Events, Recipes &amp; Effects","text":"<p>Lessons:</p> <ol> <li> <p>Event bus deep dive: tick, interaction, entity events.</p> </li> <li> <p>Custom recipe types &amp; serializers.</p> </li> <li> <p>Client effects: particles/sounds wired to gameplay events.</p> </li> </ol> <p>Lab / Project:</p> <p>Daily Ritual: time\u2011based mechanic triggered by world ticks.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Implement deterministic time/event mechanics.</p> </li> <li> <p>Author custom crafting rules.</p> </li> </ul> <p>Estimated Duration: 5\u20137 hours</p>"},{"location":"syllabus/#module-9-fluids-energy-capabilities","title":"Module 9 \u2014 Fluids &amp; Energy (Capabilities)","text":"<p>Lessons:</p> <ol> <li> <p>Fluid registration, tanks, rendering; fluid IO rules.</p> </li> <li> <p>Capabilities: custom energy system; storage, generation, consumption.</p> </li> <li> <p>Interplay: BE with inventory + fluid + energy.</p> </li> </ol> <p>Lab / Project:</p> <p>Essence Generator: converts a fluid fuel into stored energy over time.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Model multi\u2011resource systems cleanly.</p> </li> <li> <p>Expose capabilities for inter\u2011block interactions.</p> </li> </ul> <p>Estimated Duration: 6\u20138 hours</p>"},{"location":"syllabus/#module-10-configs-datapacks","title":"Module 10 \u2014 Configs &amp; Datapacks","text":"<p>Lessons:</p> <ol> <li> <p>ForgeConfigSpec: client/common/server; hot\u2011reload limits.</p> </li> <li> <p>Datapack reload listeners; codecs and JSON schemas.</p> </li> <li> <p>Balancing systems without recompiles.</p> </li> </ol> <p>Lab / Project:</p> <p>Make Infuser/Generator values datapack\u2011driven with server config multipliers.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Separate content from code for tuning.</p> </li> <li> <p>Respect server admin control surfaces.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#semester-3-world-entities-immersion-advanced","title":"SEMESTER 3 \u2014 World, Entities &amp; Immersion (Advanced)","text":""},{"location":"syllabus/#module-11-world-generation","title":"Module 11 \u2014 World Generation","text":"<p>Lessons:</p> <ol> <li> <p>Placed/Configured features; biome modifiers; JSON data flow.</p> </li> <li> <p>Ore, trees, flowers, geodes; structure templates &amp; jigsaws.</p> </li> <li> <p>Custom biomes and integration with vanilla generation.</p> </li> </ol> <p>Lab / Project:</p> <p>Crystal Caves: add ore veins, a small ruin structure, and vegetation.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Author and register world features end\u2011to\u2011end.</p> </li> <li> <p>Debug placement and density issues.</p> </li> </ul> <p>Estimated Duration: 6\u20139 hours</p>"},{"location":"syllabus/#module-12-entities-ai","title":"Module 12 \u2014 Entities &amp; AI","text":"<p>Lessons:</p> <ol> <li> <p>Entity registration, models, renderers.</p> </li> <li> <p>Goals/pathfinding; attributes and spawn rules.</p> </li> <li> <p>Tameable/rideable/throwable entities; inventories; dyeable elements; render layers.</p> </li> </ol> <p>Lab / Project:</p> <p>Forest Guardian: tameable mob with custom armor and support AI goals.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Implement full\u2011featured mobs with custom visuals.</p> </li> <li> <p>Balance spawn and behavior for gameplay.</p> </li> </ul> <p>Estimated Duration: 6\u20139 hours</p>"},{"location":"syllabus/#module-13-villagers-trades-economy","title":"Module 13 \u2014 Villagers, Trades &amp; Economy","text":"<p>Lessons:</p> <ol> <li> <p>Villager professions, POIs, houses.</p> </li> <li> <p>Trade definitions and progression.</p> </li> <li> <p>Decorative content: paintings, models; in\u2011game currency patterns.</p> </li> </ol> <p>Lab / Project:</p> <p>Elarion Merchant: new profession with curated, tag\u2011aware trades.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Integrate with village systems safely.</p> </li> <li> <p>Design sustainable trade loops.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#module-14-audio-particles-models","title":"Module 14 \u2014 Audio, Particles &amp; Models","text":"<p>Lessons:</p> <ol> <li> <p>Sound events &amp; block sound types; music discs.</p> </li> <li> <p>Particles and spawn conditions.</p> </li> <li> <p>3D item models; basic animation workflows (optional Geckolib).</p> </li> </ol> <p>Lab / Project:</p> <p>Enchanted Workshop: animated station with particles and soundscape.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Create immersive feedback for mechanics.</p> </li> <li> <p>Ship polished audiovisual content.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#semester-4-professional-mod-development-expert","title":"SEMESTER 4 \u2014 Professional Mod Development (Expert)","text":""},{"location":"syllabus/#module-15-intermod-compatibility-integrations","title":"Module 15 \u2014 Inter\u2011Mod Compatibility &amp; Integrations","text":"<p>Lessons:</p> <ol> <li> <p>Inter\u2011op via tags and capabilities; safe optional dependencies.</p> </li> <li> <p>JEI/REI categories and recipe displays.</p> </li> <li> <p>Public API design for your mod.</p> </li> </ol> <p>Lab / Project:</p> <p>Expose Infuser recipes to JEI; publish a tiny public API class.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Play nicely with the mod ecosystem.</p> </li> <li> <p>Stabilize your own extension points.</p> </li> </ul> <p>Estimated Duration: 4\u20136 hours</p>"},{"location":"syllabus/#module-16-optimization-testing-multiplayer","title":"Module 16 \u2014 Optimization, Testing &amp; Multiplayer","text":"<p>Lessons:</p> <ol> <li> <p>Tick budgets, caching, and lazy evaluation.</p> </li> <li> <p>Thread safety: enqueuing to main thread, avoiding deadlocks.</p> </li> <li> <p>Automated tests (GameTest), integration tests, and MP sync audits.</p> </li> </ol> <p>Lab / Project:</p> <p>Stress\u2011test worlds + GameTests for Infuser/Generator; MP desync checklist.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Ship performant, reliable code.</p> </li> <li> <p>Prevent regressions with tests.</p> </li> </ul> <p>Estimated Duration: 5\u20137 hours</p>"},{"location":"syllabus/#module-17-ux-accessibility-localization","title":"Module 17 \u2014 UX, Accessibility &amp; Localization","text":"<p>Lessons:</p> <ol> <li> <p>HUD overlays, in\u2011game guides, contextual tooltips.</p> </li> <li> <p>Localization workflows and accessibility considerations.</p> </li> <li> <p>Config GUIs and onboarding.</p> </li> </ol> <p>Lab / Project:</p> <p>Add a HUD meter, localized strings, and an onboarding tooltip flow.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Improve player comprehension and reach.</p> </li> <li> <p>Offer quality\u2011of\u2011life surfaces.</p> </li> </ul> <p>Estimated Duration: 3\u20135 hours</p>"},{"location":"syllabus/#module-18-packaging-licensing-publishing","title":"Module 18 \u2014 Packaging, Licensing &amp; Publishing","text":"<p>Lessons:</p> <ol> <li> <p>Metadata (mods.toml), semantic versioning, changelogs.</p> </li> <li> <p>Licensing assets and code; attribution.</p> </li> <li> <p>CI/CD with GitHub Actions; Modrinth/CurseForge publishing.</p> </li> </ol> <p>Lab / Project:</p> <p>Publish a release build with README, license, gallery, and CI pipeline.</p> <p>Learning Outcomes:</p> <ul> <li> <p>Distribute professionally with confidence.</p> </li> <li> <p>Communicate changes transparently.</p> </li> </ul> <p>Estimated Duration: 3\u20135 hours</p>"},{"location":"syllabus/#capstone-projects-suggested-pacing","title":"Capstone Projects &amp; Suggested Pacing","text":"<ul> <li> <p>Semester 1 Capstone: Content Pack \u2013 cohesive items/blocks/recipes with datagen and tags.</p> </li> <li> <p>Semester 2 Capstone: Systemic Machine \u2013 BE + GUI + networking + events + config.</p> </li> <li> <p>Semester 3 Capstone: Living World \u2013 worldgen feature + custom entity + trades.</p> </li> <li> <p>Semester 4 Capstone: Production Release \u2013 polished mod with tests and CI, published.</p> </li> </ul>"},{"location":"syllabus/#recommended-weekly-schedule-example-16week-term","title":"Recommended Weekly Schedule (Example 16\u2011Week Term)","text":"<ol> <li> <p>Week 1: Module 1</p> </li> <li> <p>Week 2\u20133: Module 2</p> </li> <li> <p>Week 4: Module 3</p> </li> <li> <p>Week 5: Module 4</p> </li> <li> <p>Week 6: Module 5 (Capstone S1 planning)</p> </li> <li> <p>Week 7: Module 6</p> </li> <li> <p>Week 8: Modules 7\u20138</p> </li> <li> <p>Week 9: Module 9</p> </li> <li> <p>Week 10: Module 10 (Capstone S2 delivery)</p> </li> <li> <p>Week 11: Module 11</p> </li> <li> <p>Week 12: Module 12</p> </li> <li> <p>Week 13: Module 13</p> </li> <li> <p>Week 14: Module 14 (Capstone S3 delivery)</p> </li> <li> <p>Week 15: Modules 15\u201316</p> </li> <li> <p>Week 16: Modules 17\u201318 (Final Release &amp; Presentation)</p> </li> </ol>"},{"location":"syllabus/#assessment-rubrics-summaries","title":"Assessment Rubrics (Summaries)","text":""},{"location":"syllabus/#lab-rubric-10-pts","title":"Lab Rubric (10 pts)","text":"<ul> <li> <p>Correctness (4): meets functional requirements, no crashes.</p> </li> <li> <p>Code Quality (3): clear structure, naming, side separation (client/server).</p> </li> <li> <p>Assets &amp; UX (2): correct assets, helpful tooltips/feedback.</p> </li> <li> <p>Git Hygiene (1): meaningful commits; README updates.</p> </li> </ul>"},{"location":"syllabus/#capstone-rubric-20-pts","title":"Capstone Rubric (20 pts)","text":"<ul> <li> <p>Scope &amp; Integration (6): combines required systems coherently.</p> </li> <li> <p>Stability &amp; Performance (5): no dupes/leaks; smooth in MP.</p> </li> <li> <p>UX &amp; Polish (4): GUI clarity, localization, sound/particles where appropriate.</p> </li> <li> <p>Docs &amp; Release (3): README, changelog, license, screenshots.</p> </li> <li> <p>Testing (2): GameTests or reproducible test scenarios.</p> </li> </ul>"},{"location":"syllabus/#policies-best-practices","title":"Policies &amp; Best Practices","text":"<ul> <li> <p>Client/Server Separation: never reference client\u2011only classes from common/server code; use Dist guards.</p> </li> <li> <p>Threading: handle networking on the correct thread; enqueue to main thread for world changes.</p> </li> <li> <p>Data Ownership: keep authoritative state server\u2011side; sync minimal diffs to clients.</p> </li> <li> <p>Versioning: tag releases; keep CHANGELOG; avoid breaking API without major version bump.</p> </li> <li> <p>Licensing: respect Mojang EULA; license your code/assets; credit third\u2011party works.</p> </li> </ul>"},{"location":"syllabus/#appendix-a-example-repository-layout","title":"Appendix A \u2014 Example Repository Layout","text":"<p>/src/main/java/com/example/mod ModMain.java registry/ (Blocks, Items, Menus, BlockEntityTypes, Sounds, Entities) content/block/... content/item/... content/be/... client/screen/... network/ (SimpleChannel, packets) world/ (features, biomes, structures) data/ (loaders, codecs, reload listeners) /src/main/resources/ meta/mods.toml assets/\\&lt;modid&gt;/{lang,models,blockstates,textures,particles,sounds} data/\\&lt;modid&gt;/{recipes,loot_tables,tags,worldgen}</p>"},{"location":"syllabus/#appendix-b-checklists","title":"Appendix B \u2014 Checklists","text":"<p>GUI Checklist</p> <ul> <li> <p>MenuType registered; factory opens on block use; slots wired.</p> </li> <li> <p>Screen registered on client; texture path correct; tooltip overlays.</p> </li> <li> <p>Sync: DataSlots or packet; server validates actions.</p> </li> <li> <p>Close handling: drop items or persist; handle chunk unloads.</p> </li> </ul> <p>Networking Checklist</p> <ul> <li> <p>SimpleChannel with protocol version; packet IDs centralized.</p> </li> <li> <p>Handlers enqueue to main thread; side checks; minimal payload.</p> </li> <li> <p>Partial sync where possible; rate\u2011limit noisy updates.</p> </li> </ul> <p>Worldgen Checklist</p> <ul> <li> <p>Configured + Placed features registered; biome modifiers applied.</p> </li> <li> <p>Datapack JSON validated; density balanced; debug placement in dev world.</p> </li> <li> <p>Structures have templates, processors, and jigsaw rules.</p> </li> </ul>"},{"location":"assignments/01-first-mod/","title":"Assignment 1 \u2014 First Mod","text":"<p>Create and package a minimal mod featuring a custom item.</p>"},{"location":"assignments/01-first-mod/#requirements","title":"Requirements","text":"<ul> <li>Build succeeds</li> <li>Item appears in-game and functions as described</li> </ul>"},{"location":"assignments/01-first-mod/#submission","title":"Submission","text":"<ul> <li>Submit the packaged JAR and a short README</li> </ul>"},{"location":"lessons/01-getting-started/","title":"Lesson 1 \u2014 Getting Started","text":"<p>Introduce the course workflow and verify your environment.</p>"},{"location":"lessons/01-getting-started/#objectives","title":"Objectives","text":"<ul> <li>Install and verify prerequisites</li> <li>Run a template mod</li> </ul>"},{"location":"lessons/01-getting-started/#steps","title":"Steps","text":"<ol> <li>Verify Java and Git</li> <li>Open the starter template in your IDE</li> <li>Run the dev client</li> </ol> <p>Add screenshots and code snippets as needed.</p>"},{"location":"lessons/02-blocks-and-items/","title":"Lesson 2 \u2014 Blocks and Items","text":"<p>Learn how to define, register, and test basic content.</p>"},{"location":"lessons/02-blocks-and-items/#objectives","title":"Objectives","text":"<ul> <li>Create a custom item</li> <li>Add a simple block</li> </ul>"},{"location":"lessons/02-blocks-and-items/#steps","title":"Steps","text":"<ol> <li>Create item class and JSONs</li> <li>Register via the appropriate registries</li> <li>Verify in-game</li> </ol>"}]}